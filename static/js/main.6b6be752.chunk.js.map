{"version":3,"sources":["components/connectors.js","components/Navbar.js","components/Vault.js","components/RangeSlider.js","components/Gateway.js","connectors/NetworkConnector.ts","connectors/index.ts","hooks/useAuth.ts","components/App.js","App.js","serviceWorker.js","index.js"],"names":["InjectedConnector","supportedChainIds","Navbar","props","react_default","a","createElement","class","data-multi-switch","data-menuanchor","href","onClick","undefined","account","onPresentConnectModal","onPresentAccountModal","Vault","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setNetworkId","_React$useState3","_React$useState4","devilToken","setDevilToken","_React$useState5","_React$useState6","setDevilTokenAddress","_React$useState7","_React$useState8","setRwd","_React$useState9","_React$useState10","setRwdAddress","_React$useState11","_React$useState12","_React$useState13","_React$useState14","devilVault","setDevilVault","_React$useState15","_React$useState16","setDevilVaultAddress","_React$useState17","_React$useState18","devilTokenBalance","setDevilTokenBalance","_React$useState19","_React$useState20","_React$useState21","_React$useState22","_React$useState23","_React$useState24","amountStaked","setAmountStaked","_React$useState25","_React$useState26","_React$useState27","_React$useState28","globalStakingBalance","setGlobalStakingBalance","_React$useState29","_React$useState30","pendingUserRewardsBusd","setPendingUserRewardsBusd","_React$useState31","_React$useState32","pendingUserRewardsDevl","setPendingUserRewardsDevl","_React$useState33","_React$useState34","setSymbol","_useState","_useState2","_React$useState35","_React$useState36","updateState","setUpdateState","_React$useState37","_React$useState38","inputValue","setInputValue","useRef","update","_update","apply","this","arguments","asyncToGenerator","regenerator_default","mark","_callee4","wrap","_context4","prev","next","_ref3","_callee3","_context3","methods","balanceOf","call","sent","toString","getUserStaked","getTotalStaked","earnedBusd","earnedDevl","stop","init","useEffect","_ref","_callee","web3","_networkId","_devilVault","rwdAddress","rwd","_devilTokenBalance","_amountStaked","_globalStakingBalance","_pendingUserRewardsBusd","_pendingUserRewardsDevl","_symbol","_context","Web3","window","ethereum","eth","net","getId","networkId","Contract","DevilVaultAbi","console","log","error","alert","DevilTokenAbi","RwdAbi","symbol","events","Staked","fromBlock","on","event","Withdrawn","RewardPaidBusd","RewardPaidDevl","RewardAddedBusd","stakeTokensVault","_ref2","_callee2","amount","_context2","utils","toWei","approve","_address","send","from","hash","stake","_x","parseFloat","fromWei","toFixed","src","alt","width","height","style","textAlign","data-np-checked","type","value","onChange","e","target","className","preventDefault","withdraw","unstakeTokensVault","claim","Gateway","setDevilGateway","devilGatewayAddress","setDevilGatewayAddress","setGatewayTransfer","setGatewayTransferAddress","_React$useState39","_React$useState40","_React$useState41","_React$useState42","ethBalance","setEthBalance","_React$useState43","_React$useState44","setData","_React$useState45","_React$useState46","price","setPrice","_React$useState47","_React$useState48","_React$useState49","_React$useState50","_React$useState51","_React$useState52","inputValueBuy","setInputValueBuy","_React$useState53","_React$useState54","inputValueSell","setInputValueSell","_useWeb3React","useWeb3React","active","library","connector","activate","deactivate","getBalance","devilGateway","gatewayTransfer","_ethBalance","DevilGatewayAbi","GatewayTransferAbi","axios","get","then","res","data","market_data","current_price","usd","DEVLPurchased","DEVLSold","data-modal-trigger","div","sendTransaction","to","buyDevl","sellDevl","id","tabindex","role","boxShadow","borderRadius","margin","color","dist_default","defaultAmount","API_KEY","process","filters","onlyCryptos","data-dismiss","aria-label","aria-hidden","RequestError","message","code","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","Error","MiniRpcProvider","chainId","url","batchWaitTimeMs","_this2","isMetaMask","host","path","nextId","batchTimeoutId","batch","clearBatch","response","json","byKey","_iterator","_step","_result","_byKey$_result$id","resolve","reject","method","info","fetch","headers","content-type","accept","body","JSON","stringify","map","item","request","t0","forEach","abrupt","ok","concat","status","statusText","t1","_ref4","reduce","memo","current","_createForOfIteratorHelper","s","n","done","result","err","f","sendAsync","callback","params","jsonrpc","catch","_ref5","promise","Promise","push","setTimeout","_x2","parsed","URL","pathname","NetworkConnector","_AbstractConnector","_ref6","_this3","urls","defaultChainId","invariant","keys","length","k","Number","providers","currentChainId","accumulator","inherits","createClass","key","_activate","provider","_getProvider","_getChainId","_callee5","_context5","_getAccount","_callee6","_context6","AbstractConnector","NETWORK_URL","NETWORK_CHAIN_ID","parseInt","defineProperty","injected","bscConnector","BscConnector","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","connectorsByName","WalletLinkConnector","appName","appLogoUrl","_connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","useAuth","toastError","_len","args","Array","_key","join","login","useCallback","connectorID","localStorage","removeItem","connectorLocalStorageKey","UnsupportedChainIdError","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","walletConnectProvider","name","logout","App","_useAuth","_useWalletModal","useWalletModal","Fragment","components_Navbar","data-toggle","components_Gateway","components_Vault","getLibrary","SCTheme","dark","zIndices","modal","core_esm","styled_components_browser_esm","theme","index_esm","App_App","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b6be752.chunk.js","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\r\n\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedChainIds: [1, 3, 4, 5, 42, 1337, 0x539, 97],\r\n})","import React, { Component } from \"react\";\r\nimport { injected } from \"./connectors.js\";\r\nimport getWeb3 from \"./getWeb3\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <header class=\"section rd-navbar-wrap\">\r\n      <nav class=\"rd-navbar\">\r\n        <div class=\"navbar-container\">\r\n          <div class=\"navbar-cell\">\r\n            <div class=\"navbar-panel\">\r\n              <button\r\n                class=\"navbar-switch\"\r\n                data-multi-switch='{\"targets\":\".rd-navbar\",\"scope\":\".rd-navbar\",\"isolate\":\"[data-multi-switch]\"}'\r\n              ></button>\r\n              <div class=\"navbar-logo\">\r\n                <h3>DEVIL PORTAL</h3>\r\n                </div>\r\n              \r\n              <p></p>\r\n              {/* <p>Contract: {contract} </p> */}\r\n              <p></p>\r\n            </div>\r\n          </div>\r\n          <div class=\"navbar-spacer\"></div>\r\n          <div class=\"navbar-cell navbar-sidebar\">\r\n            <ul class=\"navbar-navigation rd-navbar-nav fullpage-navigation\">\r\n              <li\r\n                class=\"navbar-navigation-root-item\"\r\n                data-menuanchor=\"ndex.html\"\r\n              >\r\n                <a class=\"navbar-navigation-root-link\" href=\"index.html\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"navbar-cell\">\r\n            <div class=\"navbar-subpanel\">\r\n              <div class=\"navbar-subpanel-item\">\r\n                <button\r\n                  class=\"navbar-button navbar-info-button mdi-dots-vertical\"\r\n                  data-multi-switch='{\"targets\":\".rd-navbar\",\"scope\":\".rd-navbar\",\"class\":\"navbar-info-active\",\"isolate\":\"[data-multi-switch]\"}'\r\n                ></button>\r\n                <div class=\"navbar-info\">\r\n                  {/* {this.state.account === undefined ?  */}\r\n                  <button\r\n                    class=\"btn btn-sm\"\r\n                    onClick={() => {\r\n                      if (props.account === undefined) {\r\n                        props.onPresentConnectModal();\r\n                      } else {\r\n                        props.onPresentAccountModal();\r\n                      }\r\n                    }}\r\n                  >\r\n                    {!props.account ? \"Connect Wallet\" : \" \"}{props.account}\r\n                  </button>\r\n                  {/* :    */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component, useEffect, useState, setState, useRef } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\nimport DevilVaultAbi from \"../remix_abis/DevilVault.json\";\r\nimport TetherAbi from \"../remix_abis/Tether.json\";\r\nimport RwdAbi from \"../remix_abis/RWD.json\";\r\nimport DevilTokenAbi from \"../remix_abis/DevilToken.json\";\r\n\r\nconst Vault = (props) => {\r\n\r\n  const [networkId, setNetworkId] = React.useState(undefined);\r\n  const [devilToken, setDevilToken] = React.useState([undefined]);\r\n  const [devilTokenAddress, setDevilTokenAddress] = React.useState(\"\");\r\n  const [rwd, setRwd] = React.useState(undefined);\r\n  const [rwdAddress, setRwdAddress] = React.useState(\"\");\r\n  const [rewardTokenAddress, setRewardTokenAddress] = React.useState(\"\");\r\n  const [devilVault, setDevilVault] = React.useState([undefined]);\r\n  const [devilVaultAddress, setDevilVaultAddress] = React.useState(\"\");\r\n  const [devilTokenBalance, setDevilTokenBalance] = React.useState(\"0\");\r\n  const [rwdTokenBalance, setRwdTokenBalance] = React.useState(\"0\");\r\n  const [stakingBalance, setStakingBalance] = React.useState(\"0\");\r\n  const [amountStaked, setAmountStaked] = React.useState(\"0\");\r\n  const [lifetimeRewardsGiven, setLifetimeRewardsGiven] = React.useState(\"0\");\r\n  const [globalStakingBalance, setGlobalStakingBalance] = React.useState(\"0\");\r\n  const [pendingUserRewardsBusd, setPendingUserRewardsBusd] = React.useState(\"0\");\r\n  const [pendingUserRewardsDevl, setPendingUserRewardsDevl] = React.useState(\"0\");\r\n  const [symbol, setSymbol] = React.useState([undefined]);\r\n  const [rangeval, setRangeval] = useState(null);\r\n  const [updateState, setUpdateState] = React.useState(false);\r\n  const [inputValue, setInputValue] = React.useState(0);\r\n  const inputRef = useRef();\r\n\r\n  let account = props.account\r\n\r\n  useEffect(() => {\r\n\r\n    \r\n    const init = async () => {\r\n\r\n      window.web3 = await new Web3(window.ethereum);\r\n        const web3 = await window.web3;\r\n        if(account !== undefined) {\r\n            const networkId = await web3.eth.net.getId();\r\n            setNetworkId(networkId);\r\n        }\r\n\r\n      try{\r\n\r\n      //LOAD Devil Vault\r\n      const devilVaultAddress = \"0xe12f2f9Bf3939BCe8F41CAd1247924a0B2dda942\";\r\n      setDevilVaultAddress(devilVaultAddress);\r\n      const devilVault = new web3.eth.Contract(\r\n        DevilVaultAbi,\r\n        devilVaultAddress\r\n      );\r\n      setDevilVault(devilVault);\r\n      console.log(devilVault);\r\n      } catch (error) {\r\n        alert(\r\n          'Failed to load devil vault.',\r\n              );\r\n      }\r\n\r\n        //LOAD devilToken\r\n        const devilTokenAddress = \"0x65aEd7F90a0cF876D496d8093D3F89748ba66b57\";\r\n        setDevilTokenAddress(devilTokenAddress);\r\n        const devilToken = new web3.eth.Contract(\r\n          DevilTokenAbi,\r\n          devilTokenAddress\r\n        );\r\n        setDevilToken(devilToken);\r\n        console.log(devilToken);\r\n\r\n        //LOAD RWD\r\n        const rwdAddress = \"0x19027aEf0fDB5C30b3dC4E863fccFC6F05aCf184\";\r\n        setRwdAddress(rwdAddress);\r\n        const rwd = new web3.eth.Contract(\r\n          RwdAbi,\r\n          rwdAddress\r\n        );\r\n        setRwd(rwd);\r\n        console.log(rwd);\r\n\r\n        //Load our staking state and other account data\r\n\r\n        if (account !== undefined){\r\n          let devilTokenBalance = await devilToken.methods.balanceOf(account).call();\r\n          setDevilTokenBalance(devilTokenBalance.toString());\r\n          \r\n          const amountStaked = await devilVault.methods.getUserStaked(account).call();\r\n          setAmountStaked(amountStaked.toString());\r\n\r\n          let globalStakingBalance = await devilVault.methods.getTotalStaked().call();\r\n          setGlobalStakingBalance(globalStakingBalance.toString());\r\n\r\n          // let lifetimeRewardsGiven = await devilVault.methods.getLifetimeRewards(account).call();\r\n          // setLifetimeRewardsGiven(lifetimeRewardsGiven.toString());\r\n\r\n          let pendingUserRewardsBusd = await devilVault.methods.earnedBusd(account).call();\r\n          setPendingUserRewardsBusd(pendingUserRewardsBusd.toString());\r\n\r\n          let pendingUserRewardsDevl = await devilVault.methods.earnedDevl(account).call();\r\n          setPendingUserRewardsDevl(pendingUserRewardsDevl.toString());\r\n\r\n          let symbol = await rwd.methods.symbol().call();\r\n          setSymbol(symbol);\r\n\r\n          //event subscriptions that call update function to sync state variables w/ block chain\r\n\r\n          devilVault.events.Staked({fromBlock: 0})\r\n            .on('data', event => update()\r\n            );\r\n\r\n          devilVault.events.Withdrawn({fromBlock: 0})\r\n            .on('data', event => update()\r\n            );\r\n\r\n          devilVault.events.RewardPaidBusd({fromBlock: 0})\r\n            .on('data', event => update()\r\n            );\r\n\r\n            devilVault.events.RewardPaidDevl({fromBlock: 0})\r\n            .on('data', event => update()\r\n            );\r\n          \r\n          devilVault.events.RewardAddedBusd({fromBlock: 0})\r\n            .on('data', event => update()\r\n            );\r\n\r\n          const updateState = false\r\n          setUpdateState(updateState)\r\n        } \r\n        \r\n    }\r\n    init();\r\n  }, [account, amountStaked, setAmountStaked]);\r\n    \r\n  async function update() {\r\n    \r\n    const init = async () => {\r\n\r\n      let devilTokenBalance = await devilToken.methods.balanceOf(account).call();\r\n      setDevilTokenBalance(devilTokenBalance.toString());\r\n          \r\n      const amountStaked = await devilVault.methods.getUserStaked(account).call();\r\n      setAmountStaked(amountStaked.toString());\r\n\r\n      let globalStakingBalance = await devilVault.methods.getTotalStaked().call();\r\n      setGlobalStakingBalance(globalStakingBalance.toString());\r\n\r\n      // let lifetimeRewardsGiven = await devilVault.methods.getLifetimeRewards(account).call();\r\n      // setLifetimeRewardsGiven(lifetimeRewardsGiven.toString());\r\n\r\n      let pendingUserRewardsBusd = await devilVault.methods.earnedBusd(account).call();\r\n      setPendingUserRewardsBusd(pendingUserRewardsBusd.toString());\r\n\r\n      let pendingUserRewardsDevl = await devilVault.methods.earnedDevl(account).call();\r\n          setPendingUserRewardsDevl(pendingUserRewardsDevl.toString());\r\n\r\n    }\r\n    init();\r\n  }\r\n\r\n  const stakeTokensVault = async (amount) => {\r\n    setUpdateState(true)\r\n    amount = window.web3.utils.toWei(amount, 'Ether')\r\n    devilToken.methods.approve(devilVault._address, amount).send({from: account}).on('transactionHash', (hash) => { \r\n    devilVault.methods.stake(amount).send({from: account}).on('transactionHash', (hash) => { \r\n      })\r\n    })\r\n}\r\n\r\n  const unstakeTokensVault = (amount) => {\r\n  setUpdateState(true)\r\n  amount = window.web3.utils.toWei(amount, 'Ether')\r\n  devilVault.methods.withdraw(amount).send({from: account}).on('transactionHash', (hash) => {\r\n  })\r\n}\r\n\r\n  const claimRewards = () => {\r\n  setUpdateState(true)\r\n  devilVault.methods.claim().send({from: account}).on('transactionHash', (hash) => {\r\n  })\r\n}\r\n    \r\n        return (\r\n            <div> \r\n                <div class=\"row row-30 justify-content-left\">\r\n                    <div class=\"col-4\">\r\n                        <div>\r\n                            Status: <b>{updateState ? 'loading' : 'complete'}</b>\r\n                            <p>Vault v2 - currently on testnet ONLY</p>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n                <div class=\"row row-30 justify-content-center\">\r\n                    <div class=\"col-4\">\r\n                        <div class=\"h3\">\r\n                            TOTAL STAKED   \r\n                        </div>\r\n                            <p> {parseFloat(window.web3.utils.fromWei(globalStakingBalance, 'Ether')).toFixed(5)} DEVL </p>\r\n                    </div>\r\n                    <div class=\"col-4 justify-content-center\">\r\n                        <img class=\"mt-xxl-4\" src=\"assets/media/DEVIL_logo_red_centered.png\" alt=\"\" width=\"674\" height=\"572\"/>\r\n                    </div>\r\n                        <div class=\"col-4\">\r\n                            <div class=\"h3\" style={{ textAlign: 'right' }}>\r\n                              DEVL REWARDS   \r\n                            </div>\r\n                                <p style={{ textAlign: 'right' }}>{parseFloat(window.web3.utils.fromWei(pendingUserRewardsDevl, 'Ether')).toFixed(5)} DEVL </p>\r\n                        </div>\r\n                </div>\r\n                <div class=\"row row-30 justify-content-center\">\r\n                    <div class=\"col-4\">\r\n                        <div class=\"h3\">\r\n                            USER \r\n                            STAKED   \r\n                        </div>\r\n                            <p> {parseFloat(window.web3.utils.fromWei(amountStaked, 'Ether')).toFixed(5)} DEVL </p>\r\n                    </div>\r\n                    <div class=\"col-4 justify-content-center\">\r\n                        <form class=\"block block-sm\" data-np-checked=\"1\">\r\n                                <p>Balance: {parseFloat(window.web3.utils.fromWei(devilTokenBalance, 'Ether')).toFixed(5)}</p>  \r\n                            {/* <input type=\"number\" ref={inputRef} className=\"form-control\"/> */}\r\n                            <input type=\"number\" value={inputValue} onChange={e => setInputValue(e.target.value)} className=\"form-control\"/> \r\n                                \r\n                                <button \r\n                                  class=\"link\"\r\n                                  onClick={(event) => {\r\n                                  event.preventDefault()\r\n                                  let amount\r\n                                  amount = devilTokenBalance.toString() \r\n                                  amount = window.web3.utils.fromWei(amount, 'Ether')\r\n                                  setInputValue(amount)\r\n                                  }}\r\n                                  >Max\r\n                                </button>\r\n                                \r\n                                <button \r\n                                    type='submit'\r\n                                    onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    let amount\r\n                                    amount = inputValue\r\n                                    stakeTokensVault(amount)\r\n                                    }}\r\n                                    className='btn btn-primary btn-lg btn-block'>DEPOSIT\r\n                                </button>\r\n                                \r\n                                \r\n                            \r\n                                <button \r\n                                    type='submit'\r\n                                    onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    let amount\r\n                                    amount = inputValue\r\n                                    unstakeTokensVault(amount)\r\n                                    }}\r\n                                    className='btn btn-primary btn-lg btn-block'>WITHDRAW\r\n                                </button> \r\n\r\n                                <button \r\n                                    type='submit'\r\n                                    onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    claimRewards()\r\n                                    }}\r\n                                    className='btn btn-primary btn-lg btn-block'>CLAIM\r\n                                </button>                              \r\n                        </form>\r\n                    </div>\r\n                        <div class=\"col-4\">\r\n                            <div class=\"h3\" style={{ textAlign: 'right' }}>\r\n                                BUSD REWARDS   \r\n                            </div>\r\n                                <p style={{ textAlign: 'right' }}> {parseFloat(window.web3.utils.fromWei(pendingUserRewardsBusd, 'Ether')).toFixed(5)} BUSD </p>\r\n                        </div>\r\n                </div>\r\n                {/* <div class=\"row row-30 justify-content-left\">\r\n                <p>Address: {props.account && props.account}</p>\r\n                </div> */}\r\n             \r\n                                                                  \r\n                      {/* <!-- Modal: JUST A CODE SAVE FOR TEMPLATE NOT ACTIVE--> */}\r\n                      {/* <div class=\"modal fade\" id=\"modal-login\" tabindex=\"-1\" role=\"dialog\">\r\n                          <div class=\"modal-dialog\" role=\"document\">\r\n                              <div class=\"modal-content\">\r\n                                  <div class=\"modal-body text-center\">\r\n                                      <h3>Log In</h3>\r\n                                      <p>Lorem ipsum dolor sit amet, consectetur adipiscing</p>\r\n                                      <form class=\"rd-mailform\">\r\n                                      <div class=\"form-group\">\r\n                                          <input class=\"form-control\" type=\"text\" name=\"name\" placeholder=\"Your name *\" data-constraints=\"@Required\" />\r\n                                      </div>\r\n                                      <div class=\"form-group\">\r\n                                          <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password *\" data-constraints=\"@Required\" />\r\n                                      </div>\r\n                                      <div class=\"offset-xxs group-40 d-flex flex-wrap flex-xs-nowrap align-items-center\">\r\n                                          <button class=\"btn btn-block\" type=\"submit\">Log in</button>\r\n                                      </div>\r\n                                      </form>\r\n                                  </div>\r\n                              <button class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\r\n                              </div>\r\n                          </div>\r\n                      </div> */}\r\n                       {/* <!-- Preloader--> */}\r\n                      <div class=\"preloader\">\r\n                          <div class=\"preloader-inner\">\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                          </div>\r\n                      </div>\r\n            </div>    \r\n          );\r\n        }\r\n    \r\nexport default (Vault);","import React, { Component, useEffect, useState, setState } from \"react\";\r\n\r\nconst RangeSliderDEVL = (props) => {\r\n\r\n    const [rangeval, setRangeval] = useState(0);\r\n    const [displayNum, setDisplaynum] = useState(0);\r\n    // const [sliderMax, setSliderMax] = useState(0);\r\n\r\n    let sliderMax = props.ethBalance*(10**18);\r\n    // let sliderMax = parseFloat(window.web3.utils.fromWei(props.ethBalance, 'Ether')).toFixed(5);\r\n    // setSliderMax(ethBalance);\r\n  \r\n    return (\r\n          <div class=\"slidecontainer\">\r\n        <input type=\"range\" ref={props.inputRef2} className=\"custom-range\" min=\"0\" max={sliderMax} \r\n         onChange={(event) => setRangeval(event.target.value)} />\r\n        {rangeval}\r\n        {/* <p>{parseFloat(window.web3.utils.fromWei(props.ethBalance, 'Ether')).toFixed(5)}</p> */}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default RangeSliderDEVL;","import React, { Component, useEffect, useState, setState, useRef } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport \"./App.css\";\r\nimport DevilTokenAbi from \"../remix_abis/DevilToken.json\";\r\nimport DevilGatewayAbi from \"../remix_abis/Gateway.json\";\r\nimport GatewayTransferAbi from \"../remix_abis/GatewayTransfer.json\";\r\nimport OnramperWidget from \"@onramper/widget\";\r\nimport RwdAbi from \"../remix_abis/RWD.json\";\r\nimport OnramperWidgetContainer from \"./Onboarder.js\"\r\nimport RangeSliderDEVL from \"./RangeSlider\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport axios from 'axios';\r\n\r\nconst Gateway = (props) => {\r\n\r\n  const [networkId, setNetworkId] = React.useState(undefined);\r\n  const [devilToken, setDevilToken] = React.useState([undefined]);\r\n  const [devilTokenAddress, setDevilTokenAddress] = React.useState(\"\");\r\n  const [rwd, setRwd] = React.useState(undefined);\r\n  const [rwdAddress, setRwdAddress] = React.useState(\"\");\r\n  const [rewardTokenAddress, setRewardTokenAddress] = React.useState(\"\");\r\n  const [devilVault, setDevilVault] = React.useState([undefined]);\r\n  const [devilVaultAddress, setDevilVaultAddress] = React.useState(\"\");\r\n  const [devilGateway, setDevilGateway] = React.useState([undefined]);\r\n  const [devilGatewayAddress, setDevilGatewayAddress] = React.useState(\"\");\r\n  const [gatewayTransfer, setGatewayTransfer] = React.useState([undefined]);\r\n  const [gatewayTransferAddress, setGatewayTransferAddress] = React.useState(\"\");\r\n  const [devilTokenBalance, setDevilTokenBalance] = React.useState(\"0\");\r\n  const [rwdTokenBalance, setRwdTokenBalance] = React.useState(\"0\");\r\n  const [stakingBalance, setStakingBalance] = React.useState(\"0\");\r\n  const [amountStaked, setAmountStaked] = React.useState(\"0\");\r\n  const [lifetimeRewardsGiven, setLifetimeRewardsGiven] = React.useState(\"0\");\r\n  const [globalStakingBalance, setGlobalStakingBalance] = React.useState(\"0\");\r\n  const [pendingUserRewards, setPendingUserRewards] = React.useState(\"0\");\r\n  const [symbol, setSymbol] = React.useState([undefined]);\r\n  const [ethBalance, setEthBalance] = React.useState(\"0\");\r\n  const [data, setData] = React.useState([]);\r\n  const [price, setPrice] = React.useState(\"\");\r\n  \r\n  const [updateState, setUpdateState] = React.useState(false);\r\n  const inputRef = useRef();\r\n  const inputRef2 = useRef();\r\n  const [inputValueTransfer, setInputValueTransfer] = React.useState(0);\r\n  const [inputValueBuy, setInputValueBuy] = React.useState(0);\r\n  const [inputValueSell, setInputValueSell] = React.useState(0);\r\n\r\n  const APIKEY = process.env.REACT_APP_API_KEY\r\n\r\n  //Web3React\r\n  const { active, account, library, connector, activate, deactivate, web3} = useWeb3React();\r\n\r\n  // let newWeb3 = props.web3;\r\n  window.web3 = new Web3(window.ethereum);\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n      const init = async () => {\r\n        \r\n        const web3 = await window.web3;\r\n        if(account !== undefined){\r\n          const networkId = await web3.eth.net.getId();\r\n          setNetworkId(networkId);\r\n        }\r\n\r\n        //LOAD devilToken\r\n        const devilTokenAddress = \"0xD280e0Fea29BcAe6ED9DD9fb4B9e5Fa90F5C249D\";\r\n        setDevilTokenAddress(devilTokenAddress);\r\n        const devilToken = new web3.eth.Contract(\r\n          DevilTokenAbi,\r\n          devilTokenAddress\r\n        );\r\n        setDevilToken(devilToken);\r\n        console.log(devilToken);\r\n\r\n        //LOAD devil gateway\r\n        const devilGatewayAddress = \"0x1C781CE11522dCDCc1C082606Eb3c67231624FEd\";\r\n        setDevilGatewayAddress(devilGatewayAddress);\r\n        const devilGateway = new web3.eth.Contract(\r\n          DevilGatewayAbi,\r\n          devilGatewayAddress\r\n        );\r\n        setDevilGateway(devilGateway);\r\n        console.log(devilGateway);\r\n\r\n        //LOAD devil gateway transfer\r\n        const gatewayTransferAddress = \"0x44B8b405051b3cB857dF0e2F1997140f3AFE8764\";\r\n        setGatewayTransferAddress(gatewayTransferAddress);\r\n        const gatewayTransfer = new web3.eth.Contract(\r\n          GatewayTransferAbi,\r\n          gatewayTransferAddress\r\n        );\r\n        setGatewayTransfer(gatewayTransfer);\r\n        console.log(gatewayTransfer);\r\n\r\n        //Load price through axois query\r\n        axios.get('https://api.coingecko.com/api/v3/coins/binance-smart-chain/contract/0xD280e0Fea29BcAe6ED9DD9fb4B9e5Fa90F5C249D')\r\n        .then(res => {\r\n         setData(res.data);\r\n         console.log(res.data);\r\n         setPrice(res.data.market_data.current_price.usd);\r\n        })\r\n\r\n        //Load our staking state and other account data\r\n\r\n        if (account !== undefined){\r\n          let devilTokenBalance = await devilToken.methods.balanceOf(account).call();\r\n          setDevilTokenBalance(devilTokenBalance.toString());\r\n\r\n          let ethBalance = await web3.eth.getBalance(account);\r\n          setEthBalance(ethBalance);\r\n\r\n          //event subscriptions that call update function to sync state variables w/ block chain\r\n\r\n          devilGateway.events.DEVLPurchased({fromBlock: 0})\r\n            .on('data', event => update()\r\n          );\r\n\r\n          devilGateway.events.DEVLSold({fromBlock: 0})\r\n            .on('data', event => update()\r\n          );\r\n\r\n          const updateState = false\r\n          setUpdateState(updateState)\r\n        } \r\n        \r\n    }\r\n    init();\r\n  }, [account, devilTokenBalance, ethBalance]);\r\n    \r\n  async function update() {\r\n    \r\n    const init = async () => {\r\n\r\n      const web3 = window.web3;\r\n      let devilTokenBalance = await devilToken.methods.balanceOf(account).call();\r\n          setDevilTokenBalance(devilTokenBalance.toString());\r\n\r\n      let ethBalance = await web3.eth.getBalance(account);\r\n          setEthBalance(ethBalance);\r\n\r\n    }\r\n    init();\r\n  }\r\n\r\nconst buyDevl = (amount) => {\r\n  const web3 = window.web3;\r\n  web3.eth.sendTransaction({\r\n    from: account,\r\n    to: devilGatewayAddress,\r\n    value: amount,\r\n})\r\n}\r\n\r\nconst sellDevl = (amount) => {\r\n  setUpdateState(true)\r\n  amount = window.web3.utils.toWei(amount, 'Ether')\r\n  devilToken.methods.approve(devilGateway._address, amount).send({from: account}).on('transactionHash', (hash) => {\r\n  devilGateway.methods.sellDevl(amount).send({gasLimit: 10000000, from: account})\r\n  })\r\n}\r\n\r\nconst transferDevl = (amount, receiver) => {\r\n  setUpdateState(true)\r\n  amount = window.web3.utils.toWei(amount, 'Ether')\r\n  devilToken.methods.approve(devilGateway._address, amount).send({from: account}).on('transactionHash', (hash) => {\r\n  gatewayTransfer.methods.transferDevl(amount, receiver).send({from: account})\r\n  })\r\n}\r\n\r\n\r\n        return (\r\n            <div> \r\n\r\n                <div class=\"row row-30 justify-content-left\">\r\n                    <div class=\"col-3\">\r\n                        <div>\r\n                            Status: <b>{updateState ? 'loading' : 'complete'}</b>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-3\">\r\n\r\n                    </div>\r\n                    <div class=\"col-3\">\r\n\r\n                    </div>\r\n                    <div class=\"col-3\">\r\n                    <button class=\"btn btn-primary btn-sm btn-block\" data-modal-trigger='{\"target\":\"#modal-login\"}'>BUY CRYPTO</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div class=\"row row-30 justify-content-center\">\r\n                  <div class=\"h2\" style={{ textAlign: 'center' }}>\r\n                  DEVIL'S GATEWAY\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row row-30 justify-content-center\">\r\n                    <div class=\"col-2 justify-content-center\">\r\n                        {/* Spacer */}\r\n                    </div>\r\n                    <div class=\"col-2 justify-content-center\">\r\n                        <div>\r\n                          <img class=\"mt-xxl-4\" src=\"assets/media/DEVIL_logo_red_centered.png\" alt=\"\" width=\"300\" height=\"300\" />\r\n                        </div>\r\n                        <div>\r\n                          <p style={{ textAlign: 'center' }}>Balance</p>  \r\n                          <p style={{ textAlign: 'center' }}>{parseFloat(window.web3.utils.fromWei(devilTokenBalance, 'Ether')).toFixed(5)} DEVL</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-4 justify-content-center\">\r\n                        <div class=\"row row-30 justify-content-center\">\r\n                          <div class=\"h4\" style={{ textAlign: 'center' }}>\r\n                           PRICE\r\n                          </div>\r\n                        </div>\r\n                        <div class=\"row row-30 justify-content-center\">\r\n                          <div>\r\n                            {/* {/* <p style={{ textAlign: 'center' }}>N/A</p> */}\r\n                            <p style={{ textAlign: 'center' }}>${price} USD</p>\r\n                          </div>\r\n                      </div>\r\n                        <div class=\"row row-30 justify-content-center\">\r\n                          {/* spacer */}\r\n                        </div>\r\n                        <div div class=\"row row-30 justify-content-center\">        \r\n                    </div>\r\n                    </div>\r\n                    \r\n                    <div class=\"col-2 justify-content-center\">\r\n                        <div>\r\n                          <img class=\"mt-xxl-4\"  src=\"assets/media/bnb_logo_centered.png\" alt=\"\" width=\"300\" height=\"300\" />  \r\n                        </div>\r\n                        <div>\r\n                          <p style={{ textAlign: 'center' }}>Balance</p>\r\n                          <p style={{ textAlign: 'center' }}>{parseFloat(window.web3.utils.fromWei(ethBalance, 'Ether')).toFixed(5)} BNB</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-2 justify-content-center\">\r\n                        {/* Spacer */}\r\n                    </div>\r\n                </div>\r\n                <div class=\"row row-30 justify-content-center\">\r\n                  <div class=\"col-2\"></div>\r\n                  <div class=\"col-3 justify-content-center\">\r\n                          <form class=\"block block-sm\" data-np-checked=\"1\">\r\n                          <input type=\"number\" value={inputValueBuy} onChange={e => setInputValueBuy(e.target.value)} className=\"form-control\"/>\r\n                              {/* <RangeSliderDEVL\r\n                              ethBalance = {ethBalance}\r\n                              devilTokenBalance = {devilTokenBalance}\r\n                              web3={props.web3}\r\n                              inputRef2={inputRef2}\r\n                            /> */}\r\n                              {/* <p type='submit' onClick={(event) =>{\r\n                                event.preventDefault();\r\n                                let amount\r\n                                amount = inputRef = devilTokenBalance;\r\n                              }}\r\n                              style={{ textAlign: 'right' }}>Max\r\n                              </p> */}\r\n\r\n                                <button \r\n                                  class=\"link\"\r\n                                  onClick={(event) => {\r\n                                  event.preventDefault()\r\n                                  let amount\r\n                                  amount = devilTokenBalance.toString() \r\n                                  amount = window.web3.utils.fromWei(amount, 'Ether')\r\n                                  setInputValueBuy(amount)\r\n                                  }}\r\n                                  >Max\r\n                                </button>\r\n                                  <button \r\n                                      type='submit'\r\n                                      onClick={(event) => {\r\n                                      event.preventDefault()\r\n                                      let amount\r\n                                      amount = inputValueBuy\r\n                                      amount = window.web3.utils.toWei(amount, 'Ether')\r\n                                      buyDevl(amount)\r\n                                      }}\r\n                                      className='btn btn-primary btn-lg btn-block'>BUY DEVL\r\n                                  </button>\r\n                                  \r\n                          </form>\r\n                          </div>\r\n                        <div class=\"col-2\"></div>\r\n                        <div class=\"col-3 justify-content-center\">\r\n                        <form class=\"block block-sm\" data-np-checked=\"1\">\r\n                            <input type=\"number\" value={inputValueSell} onChange={e => setInputValueSell(e.target.value)} className=\"form-control\"/>\r\n                                <button \r\n                                  class=\"link\"\r\n                                  onClick={(event) => {\r\n                                  event.preventDefault()\r\n                                  let amount\r\n                                  amount = devilTokenBalance.toString() \r\n                                  amount = window.web3.utils.fromWei(amount, 'Ether')\r\n                                  setInputValueSell(amount)\r\n                                  }}\r\n                                  >Max\r\n                                </button>\r\n                            <button \r\n                                    type='submit'\r\n                                    onClick={(event) => {\r\n                                    event.preventDefault()\r\n                                    let amount\r\n                                    amount = inputValueSell.\r\n                                    // amount = window.web3.utils.toWei(amount, 'Ether')\r\n                                    sellDevl(amount)\r\n                                    }}\r\n                                    className='btn btn-primary btn-lg btn-block'>SELL DEVL\r\n                            </button>\r\n                        </form>             \r\n                        </div>\r\n\r\n                    \r\n                    <div class=\"col-2 justify-content-center\">\r\n                        {/* Spacer */}\r\n                    </div>\r\n                    <div class=\"col-2 justify-content-center\">   \r\n                    </div>\r\n                    <div class=\"col-2 justify-content-center\"> \r\n                    </div>\r\n                    <div class=\"col-2 justify-content-center\">\r\n                        {/* Spacer */}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* GATEWAY TRANSFER\r\n                <div class=\"row row-30 justify-content-center\" style={{ textAlign: 'center' }}>\r\n                  <div class=\"col-4 justify-content-center\">\r\n                    <div class=\"h4\" style={{ textAlign: 'center' }}>\r\n                      TRANSFER DEVIL\r\n                    </div>\r\n                    <form class=\"block block-sm\" data-np-checked=\"1\">\r\n                      <p>Receiver Address</p>\r\n                      <input type=\"string\" ref={inputRef2} className=\"form-control\"/>\r\n                      <p>Amount</p>\r\n                      <input type=\"number\" value={inputValueTransfer} onChange={e => setInputValueTransfer(e.target.value)} className=\"form-control\" />\r\n                      <div class=\"p\" style={{ textAlign: 'left' }}>\r\n                        <button \r\n                          class=\"link\"\r\n                          onClick={(event) => {\r\n                          event.preventDefault()\r\n                          let amount\r\n                          amount = devilTokenBalance.toString() \r\n                          amount = window.web3.utils.fromWei(amount, 'Ether')\r\n                          setInputValueTransfer(amount)\r\n                          }}\r\n                          >Max\r\n                          </button>\r\n                        </div>\r\n                        <button \r\n                          type='submit'\r\n                          onClick={(event) => {\r\n                          event.preventDefault()\r\n                          let amount\r\n                          amount = inputValueTransfer\r\n                          // amount = window.web3.utils.toWei(amount, 'Ether')\r\n                          let receiver\r\n                          receiver = inputRef2.current.value.toString();\r\n                          transferDevl(amount, receiver)\r\n                          }}\r\n                          className='btn btn-primary btn-lg btn-block'>TRANSFER DEVL\r\n                        </button>\r\n                    </form>\r\n                  </div>         \r\n                </div> */}\r\n\r\n                <div class=\"row row-30 justify-content-center\">   \r\n                \r\n                      <div class=\"modal fade\" id=\"modal-login\" tabindex=\"-1\" role=\"dialog\">\r\n                          <div class=\"modal-dialog\" role=\"document\">\r\n                              <div class=\"modal-content\">\r\n                              {/* <article class=\"blurb blurb-boxed\"> */}\r\n                                <div\r\n                                  style={{\r\n                                    width: \"600px\",\r\n                                    height: \"600px\",\r\n                                    boxShadow: \"0 2px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n                                    borderRadius: \"10px\",\r\n                                    margin: \"auto\",\r\n                                    color: \"#000003\"\r\n                                  }}\r\n                                >\r\n                                  <OnramperWidget\r\n                                    color= \"#000003\"\r\n                                    defaultAmount={100}\r\n                                    // defaultAddrs={account}\r\n                                    API_KEY={APIKEY}\r\n                                    filters={{\r\n                                      onlyCryptos: [\"BNB_BEP20\"]\r\n                                    }}\r\n                                  />\r\n                                </div>\r\n                              {/* </article> */}\r\n                              <button class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\r\n                              </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                     \r\n                       {/* <!-- Preloader--> */}\r\n                       </div>\r\n\r\n\r\n\r\n                      <div class=\"preloader\">\r\n                          <div class=\"preloader-inner\">\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                              <div class=\"preloader-dot\"></div>\r\n                          </div>\r\n                      </div>\r\n            </div>    \r\n          );\r\n        }\r\n    \r\n//  {/* <!-- Modal: JUST A CODE SAVE FOR TEMPLATE NOT ACTIVE--> */}\r\n//                       {/* <div class=\"modal fade\" id=\"modal-login\" tabindex=\"-1\" role=\"dialog\">\r\n//                           <div class=\"modal-dialog\" role=\"document\">\r\n//                               <div class=\"modal-content\">\r\n//                                   <div class=\"modal-body text-center\">\r\n//                                       <h3>Log In</h3>\r\n//                                       <p>Lorem ipsum dolor sit amet, consectetur adipiscing</p>\r\n//                                       <form class=\"rd-mailform\">\r\n//                                       <div class=\"form-group\">\r\n//                                           <input class=\"form-control\" type=\"text\" name=\"name\" placeholder=\"Your name *\" data-constraints=\"@Required\" />\r\n//                                       </div>\r\n//                                       <div class=\"form-group\">\r\n//                                           <input class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password *\" data-constraints=\"@Required\" />\r\n//                                       </div>\r\n//                                       <div class=\"offset-xxs group-40 d-flex flex-wrap flex-xs-nowrap align-items-center\">\r\n//                                           <button class=\"btn btn-block\" type=\"submit\">Log in</button>\r\n//                                       </div>\r\n//                                       </form>\r\n//                                   </div>\r\n//                               <button class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>\r\n//                               </div>\r\n//                           </div>\r\n//                       </div> */}\r\n\r\nexport default (Gateway);\r\n\r\n// {/* //TEST API KEY: pk_test_lQP0Ao0cFm1bEbY2CGrdv3JVzcUSJUlF1D8gF25Mnsw0 */}\r\n\r\n\r\n\r\n ","import { ConnectorUpdate } from \"@web3-react/types\";\r\nimport { AbstractConnector } from \"@web3-react/abstract-connector\";\r\nimport invariant from \"tiny-invariant\";\r\n\r\ninterface NetworkConnectorArguments {\r\n  urls: { [chainId: number]: string };\r\n  defaultChainId?: number;\r\n}\r\n\r\n// taken from ethers.js, compatible interface with web3 provider\r\ntype AsyncSendable = {\r\n  isMetaMask?: boolean;\r\n  host?: string;\r\n  path?: string;\r\n  sendAsync?: (\r\n    request: any,\r\n    callback: (error: any, response: any) => void\r\n  ) => void;\r\n  send?: (request: any, callback: (error: any, response: any) => void) => void;\r\n};\r\n\r\nclass RequestError extends Error {\r\n  constructor(message: string, public code: number, public data?: unknown) {\r\n    super(message);\r\n  }\r\n}\r\n\r\ninterface BatchItem {\r\n  request: { jsonrpc: \"2.0\"; id: number; method: string; params: unknown };\r\n  resolve: (result: any) => void;\r\n  reject: (error: Error) => void;\r\n}\r\n\r\nclass MiniRpcProvider implements AsyncSendable {\r\n  public readonly isMetaMask: false = false;\r\n\r\n  public readonly chainId: number;\r\n\r\n  public readonly url: string;\r\n\r\n  public readonly host: string;\r\n\r\n  public readonly path: string;\r\n\r\n  public readonly batchWaitTimeMs: number;\r\n\r\n  private nextId = 1;\r\n\r\n  private batchTimeoutId: ReturnType<typeof setTimeout> | null = null;\r\n\r\n  private batch: BatchItem[] = [];\r\n\r\n  constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\r\n    this.chainId = chainId;\r\n    this.url = url;\r\n    const parsed = new URL(url);\r\n    this.host = parsed.host;\r\n    this.path = parsed.pathname;\r\n    // how long to wait to batch calls\r\n    this.batchWaitTimeMs = 50;\r\n  }\r\n\r\n  public readonly clearBatch = async () => {\r\n    console.info(\"Clearing batch\", this.batch);\r\n    const { batch } = this;\r\n    this.batch = [];\r\n    this.batchTimeoutId = null;\r\n    let response: Response;\r\n    try {\r\n      response = await fetch(this.url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n          accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify(batch.map((item) => item.request)),\r\n      });\r\n    } catch (error) {\r\n      batch.forEach(({ reject }) =>\r\n        reject(new Error(\"Failed to send batch call\"))\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!response.ok) {\r\n      batch.forEach(({ reject }) =>\r\n        reject(\r\n          new RequestError(`${response.status}: ${response.statusText}`, -32000)\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    let json;\r\n    try {\r\n      json = await response.json();\r\n    } catch (error) {\r\n      batch.forEach(({ reject }) =>\r\n        reject(new Error(\"Failed to parse JSON response\"))\r\n      );\r\n      return;\r\n    }\r\n    const byKey = batch.reduce<{ [id: number]: BatchItem }>((memo, current) => {\r\n      memo[current.request.id] = current;\r\n      return memo;\r\n    }, {});\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const result of json) {\r\n      const {\r\n        resolve,\r\n        reject,\r\n        request: { method },\r\n      } = byKey[result.id];\r\n      // @ts-ignore\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      if (resolve && reject) {\r\n        if (\"error\" in result) {\r\n          reject(\r\n            new RequestError(\r\n              result.error.message,\r\n              result.error.code,\r\n              result.error.data\r\n            )\r\n          );\r\n        } else if (\"result\" in result) {\r\n          resolve(result.result);\r\n        } else {\r\n          reject(\r\n            new RequestError(\r\n              `Received unexpected JSON-RPC response to ${method} request.`,\r\n              -32000,\r\n              result\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  public readonly sendAsync = (\r\n    request: {\r\n      jsonrpc: \"2.0\";\r\n      id: number | string | null;\r\n      method: string;\r\n      params?: any;\r\n    },\r\n    callback: (error: any, response: any) => void\r\n  ): void => {\r\n    this.request(request.method, request.params)\r\n      .then((result) =>\r\n        callback(null, { jsonrpc: \"2.0\", id: request.id, result })\r\n      )\r\n      .catch((error) => callback(error, null));\r\n  };\r\n\r\n  public readonly request = async (\r\n    method: string | { method: string; params: unknown[] },\r\n    params?: any\r\n  ): Promise<unknown> => {\r\n    if (typeof method !== \"string\") {\r\n      return this.request(method.method, method.params);\r\n    }\r\n    if (method === \"eth_chainId\") {\r\n      return `0x${this.chainId.toString(16)}`;\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n      this.batch.push({\r\n        request: {\r\n          jsonrpc: \"2.0\",\r\n          id: this.nextId++,\r\n          method,\r\n          params,\r\n        },\r\n        resolve,\r\n        reject,\r\n      });\r\n    });\r\n    if (!this.batchTimeoutId)\r\n      this.batchTimeoutId = setTimeout(this.clearBatch, this.batchWaitTimeMs);\r\n    return promise;\r\n  };\r\n}\r\n\r\nexport class NetworkConnector extends AbstractConnector {\r\n  private readonly providers: { [chainId: number]: MiniRpcProvider };\r\n\r\n  private currentChainId: number;\r\n\r\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\r\n    invariant(\r\n      defaultChainId || Object.keys(urls).length === 1,\r\n      \"defaultChainId is a required argument with >1 url\"\r\n    );\r\n    super({\r\n      supportedChainIds: Object.keys(urls).map((k): number => Number(k)),\r\n    });\r\n\r\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\r\n    this.providers = Object.keys(urls).reduce<{\r\n      [chainId: number]: MiniRpcProvider;\r\n    }>((accumulator, chainId) => {\r\n      accumulator[Number(chainId)] = new MiniRpcProvider(\r\n        Number(chainId),\r\n        urls[Number(chainId)]\r\n      );\r\n      return accumulator;\r\n    }, {});\r\n  }\r\n\r\n  public get provider(): MiniRpcProvider {\r\n    return this.providers[this.currentChainId];\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    return {\r\n      provider: this.providers[this.currentChainId],\r\n      chainId: this.currentChainId,\r\n      account: null,\r\n    };\r\n  }\r\n\r\n  public async getProvider(): Promise<MiniRpcProvider> {\r\n    return this.providers[this.currentChainId];\r\n  }\r\n\r\n  public async getChainId(): Promise<number> {\r\n    return this.currentChainId;\r\n  }\r\n\r\n  public async getAccount(): Promise<null> {\r\n    return null;\r\n  }\r\n\r\n  public deactivate() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default NetworkConnector;\r\n","import { ConnectorNames } from \"@pancakeswap-libs/uikit\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\r\nimport { WalletConnectConnector } from \"@web3-react/walletconnect-connector\";\r\nimport { WalletLinkConnector } from \"@web3-react/walletlink-connector\";\r\nimport { BscConnector } from \"@binance-chain/bsc-connector\";\r\nimport { NetworkConnector } from \"./NetworkConnector\";\r\n\r\nconst NETWORK_URL = \"https://bsc-dataseed.binance.org/\";\r\n\r\nexport const NETWORK_CHAIN_ID: number = parseInt(\"56\");\r\n\r\nif (typeof NETWORK_URL === \"undefined\") {\r\n  throw new Error(\r\n    `REACT_APP_NETWORK_URL must be a defined environment variable`\r\n  );\r\n}\r\n\r\nexport const network = new NetworkConnector({\r\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n});\r\n\r\nlet networkLibrary: Web3Provider | undefined;\r\nexport function getNetworkLibrary(): Web3Provider {\r\n  if (!networkLibrary)\r\n    networkLibrary = new Web3Provider(network.provider as any);\r\n  // eslint-disable-next-line no-return-assign\r\n  return networkLibrary;\r\n}\r\n\r\nexport const injected = new InjectedConnector({\r\n  supportedChainIds: [4, 56, 97],\r\n});\r\n\r\nexport const bscConnector = new BscConnector({ supportedChainIds: [56, 97] });\r\n\r\n// mainnet only\r\nexport const walletconnect = new WalletConnectConnector({\r\n  rpc: { [NETWORK_CHAIN_ID]: NETWORK_URL },\r\n  bridge: \"https://pancakeswap.bridge.walletconnect.org\",\r\n  qrcode: true,\r\n  pollingInterval: 15000,\r\n});\r\n\r\n// mainnet only\r\nexport const walletlink = new WalletLinkConnector({\r\n  url: NETWORK_URL,\r\n  appName: \"Uniswap\",\r\n  appLogoUrl:\r\n    \"https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg\",\r\n});\r\n\r\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\r\n  [ConnectorNames.Injected]: injected,\r\n  [ConnectorNames.WalletConnect]: walletconnect,\r\n  [ConnectorNames.BSC]: bscConnector,\r\n};\r\n","import { useCallback } from \"react\";\r\nimport { useWeb3React, UnsupportedChainIdError } from \"@web3-react/core\";\r\nimport { NoBscProviderError } from \"@binance-chain/bsc-connector\";\r\nimport {\r\n  NoEthereumProviderError,\r\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\r\n} from \"@web3-react/injected-connector\";\r\nimport {\r\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\r\n  WalletConnectConnector,\r\n} from \"@web3-react/walletconnect-connector\";\r\nimport {\r\n  connectorLocalStorageKey,\r\n  ConnectorNames,\r\n} from \"@pancakeswap-libs/uikit\";\r\n\r\nimport { connectorsByName } from \"../connectors/index\";\r\n\r\nconst useAuth = () => {\r\n  const { activate, deactivate } = useWeb3React();\r\n  // const { toastError } = useToast();\r\n  // @ts-ignore\r\n  const toastError = (err, ...args) => alert(err + \": \" + args.join(\" - \"));\r\n\r\n  const login = useCallback((connectorID: ConnectorNames) => {\r\n    const connector = connectorsByName[connectorID];\r\n    if (connector) {\r\n      console.log(connector);\r\n      activate(connector, async (error: Error) => {\r\n        window.localStorage.removeItem(connectorLocalStorageKey);\r\n        if (error instanceof UnsupportedChainIdError) {\r\n          toastError(\r\n            \"Unsupported Chain Id\",\r\n            \"Unsupported Chain Id Error. Check your chain Id.\"\r\n          );\r\n        } else if (\r\n          error instanceof NoEthereumProviderError ||\r\n          error instanceof NoBscProviderError\r\n        ) {\r\n          toastError(\"Provider Error\", \"No provider was found\");\r\n        } else if (\r\n          error instanceof UserRejectedRequestErrorInjected ||\r\n          error instanceof UserRejectedRequestErrorWalletConnect\r\n        ) {\r\n          if (connector instanceof WalletConnectConnector) {\r\n            const walletConnector = connector as WalletConnectConnector;\r\n            walletConnector.walletConnectProvider = null;\r\n          }\r\n          toastError(\r\n            \"Authorization Error\",\r\n            \"Please authorize to access your account\"\r\n          );\r\n        } else {\r\n          toastError(error.name, error.message);\r\n        }\r\n      });\r\n    } else {\r\n      toastError(\"Can't find connector\", \"The connector config is wrong\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return { login, logout: deactivate };\r\n};\r\n\r\nexport default useAuth;\r\n","import React, { Component, useEffect, useState, setState } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport \"./App.css\";\r\nimport Vault from \"./Vault.js\";\r\nimport Gateway from \"./Gateway\"\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport useAuth from \"../hooks/useAuth\";\r\nimport { useWalletModal } from \"@pancakeswap-libs/uikit\";\r\nimport Governance from \"./Governance\";\r\nimport { Web3Provider } from \"@ethersproject/providers\";\r\nimport Web3 from \"web3\";\r\n\r\n//Web3Modal\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nfunction App() {\r\n\r\n  const { login, logout } = useAuth();\r\n  const { active, account, library, connector, activate, deactivate, web3} = useWeb3React();\r\n  const { onPresentConnectModal, onPresentAccountModal } = useWalletModal(\r\n    login,\r\n    logout,\r\n    account || undefined\r\n  );\r\n  console.log(account);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Navbar\r\n          account={account}\r\n          onPresentConnectModal={onPresentConnectModal}\r\n          onPresentAccountModal={onPresentAccountModal}\r\n        />\r\n        <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\">\r\n          <div class=\"page\">\r\n            <section class=\"section-lg section-one-screen\">\r\n              <div class=\"container\">\r\n                <div class=\"tab tab-line\">\r\n                  <ul class=\"nav nav-line biggest\">\r\n                    <li class=\"nav-item\" role=\"presentation\">\r\n                      <a class=\"nav-link active show\" href=\"#tabs-1-1\" data-toggle=\"tab\">\r\n                        Gateway\r\n                      </a>\r\n                    </li>\r\n                    <li class=\"nav-item\" role=\"presentation\">\r\n                      <a class=\"nav-link\" href=\"#tabs-1-2\" data-toggle=\"tab\">\r\n                        Vault\r\n                      </a>\r\n                    </li>\r\n                    <li class=\"nav-item\" role=\"presentation\">\r\n                      <a class=\"nav-link\" href=\"#tabs-1-3\" data-toggle=\"tab\">\r\n                        Lock\r\n                      </a>\r\n                    </li>\r\n                    <li class=\"nav-item\" role=\"presentation\">\r\n                      <a class=\"nav-link\" href=\"#tabs-1-4\" data-toggle=\"tab\">\r\n                        Information\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n                <div class=\"tab-content\">\r\n                  <div class=\"tab-pane fade active show\" id=\"tabs-1-1\">\r\n                    <div class=\"box px-sm-4 px-xl-4 px-xxl-4\">\r\n                      <div className=\"content\">\r\n                      <div class=\"row row-30 justify-content-center\">\r\n                        {/* <p><p2>{account}</p2></p> */}\r\n                        <p></p>\r\n                      </div>\r\n                        <Gateway\r\n                          account={account}\r\n                          web3={web3}\r\n                        />  \r\n                      </div>\r\n                      {/* <!-- Tab panes--> */}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"tab-pane fade\" id=\"tabs-1-2\">\r\n                    <div class=\"box px-xl-4 px-xxl-4\">\r\n                    <div className=\"content\">\r\n                      <Vault\r\n                          account={account}\r\n                          web3={web3}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"tab-pane fade\" id=\"tabs-1-3\">\r\n                    <div class=\"box px-xl-4 px-xxl-4\">\r\n                    <div className=\"content\">\r\n                      {/* <Governance \r\n                          account={account}\r\n                          web3={web3}\r\n                        /> */}\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"tab-pane fade\" id=\"tabs-1-4\">\r\n                    <div class=\"box px-xl-4 px-xxl-4\">\r\n                      <div class=\"row row-30 justify-content-center\">\r\n                        <div class=\"col-10 justify-content-center\">\r\n                          <div class=\"h3\" style={{ textAlign: 'center' }}>\r\n                              DEVIL'S VAULT   \r\n                          </div>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             <b>Version 1</b>\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Deposit your DEVL in order to earn your share of the 3% tax in the form of BUSD.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Global Staked refers to the total DEVL currently staked, while User Staked refers to your personal staking balance.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Lifetime Rewards tracks the total amount of BUSD awarded to all holders since the beginning.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Pending Rewards indicates the amount of BUSD you can claim.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row row-30 justify-content-center\">\r\n                        <div class=\"col-10 justify-content-center\">\r\n                          <div class=\"h3\" style={{ textAlign: 'center' }}>\r\n                              DEVIL LOCK  \r\n                          </div>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             <b>Version 1</b>\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Allows users to vote on when the contract can be unlocked, allowing the DEVL team to make changes to the token.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             The information at the top inform you if the contract is locked or unlocked, when locked, the token's functions cannot be called by the DEVL team until a successful vote.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Total Support and Total Oppose track the total votes in favor or in opposition to the DEVL team's request to unlock the contract.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             User Support and User Oppose track your votes.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"row row-30 justify-content-center\">\r\n                        <div class=\"col-10 justify-content-center\">\r\n                          <div class=\"h3\" style={{ textAlign: 'center' }}>\r\n                              DEVIL GATEWAY \r\n                          </div>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             <b>Version 1</b>\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             To buy DEVL - enter the amount of BNB you wish to use.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             To sell DEVL - enter the amount of DEVL you wish to sell.\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             To onramp fiat for BSC BNB (BEP-20), click \"Buy Crypto\"\r\n                          </p>\r\n                          <p style={{ textAlign: 'center' }}>\r\n                             Note: Price information coming after launch when connection available.\r\n                          </p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    </div>\r\n                  \r\n                </div>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// }\r\nexport { App };\r\n","import { ModalProvider } from \"@pancakeswap-libs/uikit\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { light, dark } from \"@pancakeswap-libs/uikit\";\r\nimport { Web3ReactProvider } from \"@web3-react/core\";\r\nimport React from \"react\";\r\nimport { App as ComponentApp } from \"./components/App\";\r\nimport Web3 from \"web3\";\r\nfunction getLibrary(provider, connector) {\r\n  return new Web3(provider); // this will vary according to whether you use e.g. ethers or web3.js\r\n}\r\nconst App = () => {\r\n  const SCTheme = dark;\r\n  // @ts-ignore\r\n  SCTheme.zIndices.modal = 1001;\r\n  return (\r\n    <Web3ReactProvider getLibrary={getLibrary}>\r\n      <ThemeProvider theme={SCTheme}>\r\n        <ModalProvider>\r\n          <ComponentApp />\r\n        </ModalProvider>\r\n      </ThemeProvider>\r\n    </Web3ReactProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}